let w:int = __width;
let h:int = __height;

let startingSpots:int = 5;

let c1:colour = #6d9d5c;
let c2:colour = #b6d7a8;
let c3:colour = #000000;


//start by clearing the screen
__pixelr 0,0,w,h,#ffffff;

//start with 5 seed mold spots (chance of having less than 5 by selecting same pixel)
for(let i:int=0;i<startingSpots;i=i+1){
    __pixel __randi w, __randi h, c1;
}


while(true){
    let x:int = __randi w;
    let y:int = __randi h;

    let currentColour:colour = __read x,y;

    let getInfectedFromNeighbours = getNeighboursWithColour(currentColour)
}





fun getNeighboursWithColour(x:int,y:int,c:colour)->float{

    let correctColoured:int = 0; //pixels with the expected colour
    let pixelsChecked:int = 0; //number of pixels checked - max 8 but can be less if some neighbours were out of bounds

    __pixel x,y,#ff0000;

    for(let i:int=-1;i<=1;i=i+1){ //loop thru 3x3
        for(let j:int=-1;j<=1;j=j+1){
            if(!((i == 0) and (j == 0))){ //do not count the center square

                let newX:int = x+i; //x + offset
                let newY:int = y+j; //y + offset

                if(!((newX<0) or (newX>__width) or (newY < 0) or (newY>__height))){ //if it is out of bounds, ignore
                    pixelsChecked = pixelsChecked+1;
                    if((__read newX,newY) == c){
                        correctColoured = correctColoured+1; //found pixel with colour
                    }

                }

            }

        }
    }
    let res:float = correctColoured / pixelsChecked;
    return res;
}

