/*
Visual matrix-style display inspired from the Matrix movie
A random column is selected, cleared and randomly filled with a line containing 1-4 colours.

use:
this example was created as an example of using PixArDis to create visual displays
using the power of loops, randomization and delays
*/

let w:int = __width;
let h:int = __height;

let clearCol:colour = #000000;

__print clear(w,h,clearCol);
__print matrix(w,h,clearCol);


fun clear(w:int, h:int, c:colour)->int{
    for(let i:int = 0; i < w; i=i+1){ //using for loops instead of pixelr just to test nested for loops
        for(let j:int = 0; j < h; j=j+1){
            __pixel i,j,c;
        }
    }
    return 0;
}

fun matrix(w:int, h:int, c_background:colour)->int{

    let c1:colour = #204829;
    let c2:colour = #22b455;
    let c3:colour = #80ce86;
    let c4:colour = #92e5a1;

    while(true){
        //pick a random column
        let col:int = __randi w;

        //clear the column
        __pixelr col,0,1,h,c_background;

        let totalLen:int = __randi h; //total length of strip (minimum of 1/4 the height)
        let halfLen:int = __randi totalLen; //sum of first 2 strips

        let length1:int = __randi halfLen;
        let length2:int = halfLen - length1;

        let bottomHalfLen:int = totalLen - halfLen;

        let length3:int = __randi bottomHalfLen;
        let length4:int = bottomHalfLen - length3;

        __print 1000000000; //marker for debugging
        __print col;
        __print length1;
        __print length2;
        __print length3;
        __print length4;
        __print totalLen;

        let pixelDelay: int = (__randi 20); //max of 20ms per pixel

        let currentY:int = h-1;

        for(let i:int = 0;i<length1;i=i+1){
            __pixel col,currentY,c1;
            currentY = currentY -1;
            __delay pixelDelay;

        }

        for(let j:int = 0;j<length2;j=j+1){
            __pixel col,currentY,c2;
            currentY = currentY -1;
            __delay pixelDelay;
        }

        for(let k:int = 0;k<length3;k=k+1){
            __pixel col,currentY,c3;
            currentY = currentY -1;
            __delay pixelDelay;
        }

        for(let l:int = 0;l<length4;l=l+1){
            __pixel col,currentY,c4;
            currentY = currentY -1;
            __delay pixelDelay;
        }

        __delay 500;
    }

    return 0;
}